#r "../../packages/Newtonsoft.Json/lib/net45/Newtonsoft.Json.dll"

open Newtonsoft.Json

type ParameterType = 
    | Bool
    | Int64
    | String

type FieldMode =
    | Nullable
    | NonNullable
    | Repeated

type FieldName = string

type FieldType =
    | Boolean
    | String
    | Integer
    | Record

type Field =
    | Value of FieldName * FieldType * FieldMode
    | Record of FieldName * Field list * FieldMode

type Paramter = {
    Name: string
    ParameterType: ParameterType
}

open Newtonsoft.Json.Linq

let parseParamterType = function
    | "BOOL" -> Bool
    | "STRING" -> ParameterType.String
    | "INT64" -> Int64
    | x -> raise (exn ("Unsupported type: " + x))

let parseParameter (jObj:JToken) = 
    jObj.["undeclaredQueryParameters"]
    |> Seq.toList
    |> List.map (fun jToken ->
        {
            ParameterType = parseParamterType (jToken.["parameterType"].Value<string>("type"))
            Name = jToken.Value<string>("name")
        })


let parseName (jObj:JToken) = 
    jObj.Value<string>("name")

let parseType (jObj:JToken) : FieldType= 
    match jObj.Value<string>("type") with
    | "INTEGER" -> Integer
    | "STRING" -> String
    | "BOOLEAN" -> Boolean

let parseMode (jObj:JToken) = 
    match jObj.Value<string>("mode") with
    | "NULLABLE" -> Nullable
    | "REPEATED" -> Repeated

let rec parseField (jObj:JToken) =
    match jObj.Value<string>("type") with
    | "RECORD" -> parseRecord jObj
    | x -> parseValue jObj
and parseRecord (jObj:JToken) = 
    let fields = jObj.["fields"] |> Seq.toList |> List.map parseField
    let fieldName = parseName jObj
    let mode = parseMode jObj
    Record(fieldName, fields, mode)
and parseValue (jObj:JToken) =
    let fieldName = parseName jObj
    let mode = parseMode jObj
    let fieldType = parseType jObj
    Value(fieldName, fieldType, mode)
    
let parseSchema (jObj:JToken) = 
    jObj.["schema"].["fields"]
    |> Seq.toList
    |> List.map parseField

let parseQueryMeta json = 
    let jObj = JObject.Parse(json).["statistics"].["query"]
    parseParameter jObj, parseSchema jObj

// Generated by
/// bq query --format=json --dry_run=true --use_legacy_sql=false 'SELECT @a IS TRUE AS x, @b + 1 AS y, "foo" = @c AS z, ["tomas", "jansson"] as w, STRUCT("wat" as t, 69 as u) as v, [STRUCT(3, "allo" as g), STRUCT(5 as a, "yolo")] as u, STRUCT(["a"] as h) as t;'
let sample = """
{
    "status": {
        "state": "DONE"
    },
    "kind": "bigquery#job",
    "statistics": {
        "query": {
            "statementType": "SELECT",
            "totalBytesBilled": "0",
            "totalBytesProcessed": "0",
            "cacheHit": false,
            "undeclaredQueryParameters": [
                {
                    "parameterType": {
                        "type": "BOOL"
                    },
                    "name": "a"
                },
                {
                    "parameterType": {
                        "type": "INT64"
                    },
                    "name": "b"
                },
                {
                    "parameterType": {
                        "type": "STRING"
                    },
                    "name": "c"
                }
            ],
            "schema": {
                "fields": [
                    {
                        "type": "BOOLEAN",
                        "name": "x",
                        "mode": "NULLABLE"
                    },
                    {
                        "type": "INTEGER",
                        "name": "y",
                        "mode": "NULLABLE"
                    },
                    {
                        "type": "BOOLEAN",
                        "name": "z",
                        "mode": "NULLABLE"
                    },
                    {
                        "type": "STRING",
                        "name": "w",
                        "mode": "REPEATED"
                    },
                    {
                        "fields": [
                            {
                                "type": "STRING",
                                "name": "t",
                                "mode": "NULLABLE"
                            },
                            {
                                "type": "INTEGER",
                                "name": "u",
                                "mode": "NULLABLE"
                            }
                        ],
                        "type": "RECORD",
                        "name": "v",
                        "mode": "NULLABLE"
                    },
                    {
                        "fields": [
                            {
                                "type": "INTEGER",
                                "name": "_field_1",
                                "mode": "NULLABLE"
                            },
                            {
                                "type": "STRING",
                                "name": "g",
                                "mode": "NULLABLE"
                            }
                        ],
                        "type": "RECORD",
                        "name": "u",
                        "mode": "REPEATED"
                    },
                    {
                        "fields": [
                            {
                                "type": "STRING",
                                "name": "h",
                                "mode": "REPEATED"
                            }
                        ],
                        "type": "RECORD",
                        "name": "t",
                        "mode": "NULLABLE"
                    }
                ]
            }
        },
        "creationTime": "1490729738377",
        "totalBytesProcessed": "0"
    },
    "jobReference": {
        "projectId": "uc-prox-production"
    },
    "etag": "\"smpMas70-D1-zV2oEH0ud6qY21c/IWCngCv5ww2vMSLRv2GxsJsBwwU\"",
    "configuration": {
        "query": {
            "createDisposition": "CREATE_IF_NEEDED",
            "query": "SELECT @a IS TRUE AS x, @b + 1 AS y, \"foo\" = @c AS z, [\"tomas\", \"jansson\"] as w, STRUCT(\"wat\" as t, 69 as u) as v, [STRUCT(3, \"allo\" as g), STRUCT(5 as a, \"yolo\")] as u, STRUCT([\"a\"] as h) as t;",
            "writeDisposition": "WRITE_TRUNCATE",
            "destinationTable": {
                "projectId": "uc-prox-production",
                "tableId": "anon311d2e18c944c7a5c91ab469c91b33527a239a06",
                "datasetId": "_2a855e87bf6147c55e896dcce917ee0deb1bc026"
            },
            "useLegacySql": false
        },
        "dryRun": true
    },
    "user_email": "tomas.jansson@unacast.com"
}"""

//printfn "==> %A" y
parseQueryMeta sample
|> (printfn "RESULT: %A")